-- phpMyAdmin SQL Dump
-- version 5.2.1
-- https://www.phpmyadmin.net/
--
-- Host: 127.0.0.1
-- Generation Time: Apr 17, 2025 at 10:40 AM
-- Server version: 10.4.32-MariaDB
-- PHP Version: 8.0.30

SET SQL_MODE = "NO_AUTO_VALUE_ON_ZERO";
START TRANSACTION;
SET time_zone = "+00:00";


/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8mb4 */;

--
-- Database: `mock_interview`
--

-- --------------------------------------------------------

--
-- Table structure for table `interviews`
--

CREATE TABLE `interviews` (
  `id` int(11) NOT NULL,
  `mockid` varchar(50) DEFAULT NULL,
  `jsonmockresponse` text DEFAULT NULL,
  `job_position` varchar(100) DEFAULT NULL,
  `job_description` text DEFAULT NULL,
  `job_experience` int(11) DEFAULT NULL,
  `created_by` varchar(50) DEFAULT NULL,
  `created_at` timestamp NOT NULL DEFAULT current_timestamp()
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;

--
-- Dumping data for table `interviews`
--

INSERT INTO `interviews` (`id`, `mockid`, `jsonmockresponse`, `job_position`, `job_description`, `job_experience`, `created_by`, `created_at`) VALUES
(62, '67f24ff010252', '{\"candidates\":[{\"content\":{\"parts\":[{\"text\":\"\\n[\\n  {\\n    \\\"question\\\": \\\"Describe the difference between `VARCHAR` and `CHAR` data types in SQL. When would you use each?\\\",\\n    \\\"answer\\\": \\\"Both `VARCHAR` and `CHAR` store strings, but `CHAR` is fixed-length, padded with spaces if the string is shorter than the defined length, while `VARCHAR` is variable-length, storing only the characters provided. `CHAR` is more efficient if all strings are close to the same length and the length is known beforehand (e.g., storing fixed-length codes). `VARCHAR` is better when string lengths vary significantly, as it saves storage space.\\\"\\n  },\\n  {\\n    \\\"question\\\": \\\"Explain what a primary key is and why it\'s important in a database table.\\\",\\n    \\\"answer\\\": \\\"A primary key is a column or set of columns that uniquely identifies each row in a table.  It must contain unique values and cannot contain NULL values. It\'s important because it enforces data integrity, allows for efficient data retrieval (especially in joins with other tables), and is essential for defining relationships between tables (foreign keys referencing the primary key).\\\"\\n  },\\n  {\\n    \\\"question\\\": \\\"What is the purpose of the `GROUP BY` clause in SQL?\\\",\\n    \\\"answer\\\": \\\"The `GROUP BY` clause is used to group rows that have the same values in one or more columns into a summary row.  It is typically used in conjunction with aggregate functions (e.g., `COUNT`, `SUM`, `AVG`, `MIN`, `MAX`) to perform calculations on each group. For example, `SELECT department, COUNT(*) FROM employees GROUP BY department` would return the number of employees in each department.\\\"\\n  },\\n  {\\n    \\\"question\\\": \\\"What is the difference between `WHERE` and `HAVING` clauses in SQL? When would you use each?\\\",\\n    \\\"answer\\\": \\\"Both `WHERE` and `HAVING` filter data, but `WHERE` filters rows *before* grouping is applied, while `HAVING` filters groups *after* grouping has been applied by the `GROUP BY` clause. `WHERE` is used to filter individual rows based on their values. `HAVING` is used to filter the results of aggregated data (e.g., groups) based on aggregate function values.\\\"\\n  },\\n  {\\n    \\\"question\\\": \\\"Write a SQL query to retrieve all columns from a table named `Employees` where the `salary` is greater than 50000 and the `department` is \'Sales\'.\\\",\\n    \\\"answer\\\": \\\"sql\\\\nSELECT *\\\\nFROM Employees\\\\nWHERE salary > 50000 AND department = \'Sales\';\\\\n This query selects all columns (`*`) from the `Employees` table.  The `WHERE` clause filters the rows to include only those where the `salary` is greater than 50000 *and* the `department` is \'Sales\'.\\\"\\n  }\\n]\\n\\n\"}],\"role\":\"model\"},\"finishReason\":\"STOP\",\"citationMetadata\":{\"citationSources\":[{\"startIndex\":702,\"endIndex\":841,\"uri\":\"https:\\/\\/entri.app\\/blog\\/ey-sql-interview-questions\\/\"},{\"startIndex\":1121,\"endIndex\":1256,\"uri\":\"https:\\/\\/github.com\\/parthabathia\\/interview-questions\"},{\"startIndex\":2371,\"endIndex\":2505,\"uri\":\"https:\\/\\/www.w3resource.com\\/postgresql-exercises\\/subquery\\/postgresql-subquery-exercise-11.php\"}]},\"avgLogprobs\":-0.2144104863556338}],\"usageMetadata\":{\"promptTokenCount\":43,\"candidatesTokenCount\":639,\"totalTokenCount\":682,\"promptTokensDetails\":[{\"modality\":\"TEXT\",\"tokenCount\":43}],\"candidatesTokensDetails\":[{\"modality\":\"TEXT\",\"tokenCount\":639}]},\"modelVersion\":\"gemini-2.0-flash\"}', 'SQL developer', 'SQL', 1, 'gorea722@gamil.com', '2025-04-06 09:57:09'),
(63, '67f25915135c9', '{\"candidates\":[{\"content\":{\"parts\":[{\"text\":\"\\n[\\n  {\\n    \\\"question\\\": \\\"Explain the difference between `malloc()` and `calloc()` in C. When would you prefer one over the other?\\\",\\n    \\\"answer\\\": \\\"Both `malloc()` and `calloc()` are used for dynamic memory allocation in C.  `malloc()` allocates a block of memory of a specified size, but does not initialize the memory. The allocated memory contains garbage values. `calloc()` allocates a block of memory for an array of elements, each of a certain size, and initializes all the allocated memory to zero.  You\'d prefer `calloc()` when you need the memory to be initialized to zero, especially for numerical computations or when dealing with sensitive data.  `malloc()` is generally faster if you don\'t need initialization, as it skips the zeroing step. If performance is critical and initialization isn\'t required, use `malloc()`. If initialized memory is required, use `calloc()`.\\\"\\n  },\\n  {\\n    \\\"question\\\": \\\"What are pointers in C, and how are they used? Provide an example of pointer usage.\\\",\\n    \\\"answer\\\": \\\"A pointer in C is a variable that stores the memory address of another variable. They are used to indirectly access and manipulate data stored at that address. Pointers are declared using the `*` operator.  Example:\\\\n\\\\nc\\\\nint num = 10;\\\\nint *ptr = &num; \\/\\/ ptr now holds the address of num\\\\n\\\\nprintf(\\\\\\\"Value of num: %d\\\\\\\\n\\\\\\\", num);\\\\nprintf(\\\\\\\"Address of num: %p\\\\\\\\n\\\\\\\", &num);\\\\nprintf(\\\\\\\"Value of ptr: %p\\\\\\\\n\\\\\\\", ptr);\\\\nprintf(\\\\\\\"Value pointed to by ptr: %d\\\\\\\\n\\\\\\\", *ptr); \\/\\/ Dereferencing ptr\\\\n\\\\n*ptr = 20; \\/\\/ Modifying num through ptr\\\\nprintf(\\\\\\\"Value of num after modification: %d\\\\\\\\n\\\\\\\", num);\\\\n\\\\nPointers are crucial for dynamic memory allocation, passing arguments by reference, and implementing data structures like linked lists.\\\"\\n  },\\n  {\\n    \\\"question\\\": \\\"What is a structure in C, and how is it defined? Give an example.\\\",\\n    \\\"answer\\\": \\\"A structure in C is a user-defined data type that groups together variables of different data types under a single name. It allows you to treat related data as a single unit. Structures are defined using the `struct` keyword. Example:\\\\n\\\\nc\\\\nstruct Point {\\\\n  int x;\\\\n  int y;\\\\n};\\\\n\\\\nint main() {\\\\n  struct Point p1;\\\\n  p1.x = 10;\\\\n  p1.y = 20;\\\\n  printf(\\\\\\\"Point coordinates: (%d, %d)\\\\\\\\n\\\\\\\", p1.x, p1.y);\\\\n  return 0;\\\\n}\\\\n\\\"\\n  },\\n  {\\n    \\\"question\\\": \\\"Explain the difference between `static` and `const` keywords in C, with respect to variables.\\\",\\n    \\\"answer\\\": \\\"`static` and `const` serve different purposes in C. `const` keyword makes a variable\'s value read-only after initialization. Once a variable is declared `const`, its value cannot be changed during the program\'s execution. `static` keyword, when applied to a variable inside a function, gives the variable *static storage duration*. It retains its value between function calls. Its scope is still limited to the function, but it\'s only initialized once during the program\'s lifetime. When applied to a global variable or function, `static` limits its visibility to the current file (internal linkage). This prevents name collisions with other files.\\\"\\n  },\\n  {\\n    \\\"question\\\": \\\"Describe the different data types in C and give memory allocations for each data type\\\",\\n    \\\"answer\\\": \\\"C provides several basic data types to represent different kinds of values:\\\\n\\\\n*   **`int`:** Integer numbers (e.g., -10, 0, 25). Typically occupies 4 bytes (32 bits) on most systems, but can be 2 bytes on older or embedded systems.\\\\n*   **`char`:** Single characters (e.g., \'a\', \'Z\', \'7\').  Occupies 1 byte.\\\\n*   **`float`:** Single-precision floating-point numbers (e.g., 3.14, -2.5).  Typically occupies 4 bytes.\\\\n*   **`double`:** Double-precision floating-point numbers (e.g., 3.14159265359).  Typically occupies 8 bytes.\\\\n*   **`short`:** Short integer.  Typically occupies 2 bytes.\\\\n*   **`long`:** Long integer.  Typically occupies 4 or 8 bytes (system-dependent).\\\\n*   **`long long`:** Very long integer. Typically occupies 8 bytes.\\\\n*   **`void`:** Represents the absence of a type. Used for functions that don\'t return a value or for generic pointers.\\\\n\\\\nThe exact size of these data types can vary depending on the compiler and the underlying architecture. Use `sizeof()` operator to check memory allocation in bytes.\\\"\\n  }\\n]\\n\"}],\"role\":\"model\"},\"finishReason\":\"STOP\",\"citationMetadata\":{\"citationSources\":[{\"startIndex\":1856,\"endIndex\":1994,\"uri\":\"https:\\/\\/topperworld.in\\/structures-in-cpp\\/\"}]},\"avgLogprobs\":-0.21967762074571975}],\"usageMetadata\":{\"promptTokenCount\":44,\"candidatesTokenCount\":1128,\"totalTokenCount\":1172,\"promptTokensDetails\":[{\"modality\":\"TEXT\",\"tokenCount\":44}],\"candidatesTokensDetails\":[{\"modality\":\"TEXT\",\"tokenCount\":1128}]},\"modelVersion\":\"gemini-2.0-flash\"}', 'software developer', 'c programming', 0, 'gorea722@gamil.com', '2025-04-06 10:36:12'),
(64, '67f2a3aa4d82f', '{\"candidates\":[{\"content\":{\"parts\":[{\"text\":\"\\n[\\n  {\\n    \\\"question\\\": \\\"Describe your experience with HTML semantic elements. Why are they important?\\\",\\n    \\\"answer\\\": \\\"I have experience using semantic HTML elements like `<article>`, `<aside>`, `<nav>`, `<header>`, `<footer>`, and `<main>`. They\'re important because they provide meaning to the structure of a webpage, improving accessibility for screen readers and enhancing SEO by making it easier for search engines to understand the content. They also contribute to cleaner and more maintainable code.\\\"\\n  },\\n  {\\n    \\\"question\\\": \\\"Explain the difference between inline, block, and inline-block elements in HTML. Give examples of common elements for each.\\\",\\n    \\\"answer\\\": \\\"Inline elements flow within the text, only taking up as much width as necessary (e.g., `<span>`, `<a>`, `<em>`). Block elements take up the full width available and start on a new line (e.g., `<div>`, `<p>`, `<h1>`). Inline-block elements are like inline elements but allow you to set their width and height (e.g., `<img>`, or any element with `display: inline-block` applied in CSS).\\\"\\n  },\\n  {\\n    \\\"question\\\": \\\"How do you ensure your HTML code is accessible?\\\",\\n    \\\"answer\\\": \\\"I ensure accessibility by using semantic HTML, providing alternative text for images (`alt` attribute), using appropriate heading structures (H1 to H6), ensuring sufficient color contrast, labeling form elements correctly with `<label>`, and using ARIA attributes when necessary to provide more information to assistive technologies. I also use accessibility testing tools to identify and address potential issues.\\\"\\n  },\\n  {\\n    \\\"question\\\": \\\"Describe a situation where you had to debug a complex HTML structure. What approach did you take?\\\",\\n    \\\"answer\\\": \\\"In one project, a complex HTML table was not rendering correctly in all browsers. I started by using the browser\'s developer tools to inspect the HTML and CSS. I identified misnested elements and inconsistent table row\\/column structures. I then systematically corrected the HTML, using the browser\'s element highlighting feature to visually confirm the fixes were working correctly.  I also used a HTML validator to identify any structural errors that may have caused the unexpected rendering.\\\"\\n  },\\n  {\\n    \\\"question\\\": \\\"What are your preferred methods for structuring HTML for responsiveness?\\\",\\n    \\\"answer\\\": \\\"I prefer to use a combination of techniques, including a mobile-first approach. This means starting with a basic layout optimized for small screens and then using CSS media queries to progressively enhance the layout for larger screens.  I also utilize flexible grid layouts and flexible images to ensure content adapts well to different screen sizes.  I also use viewport meta tag to ensure the page scales correctly on mobile devices.\\\"\\n  }\\n]\\n\\n\"}],\"role\":\"model\"},\"finishReason\":\"STOP\",\"avgLogprobs\":-0.37994952177881597}],\"usageMetadata\":{\"promptTokenCount\":43,\"candidatesTokenCount\":597,\"totalTokenCount\":640,\"promptTokensDetails\":[{\"modality\":\"TEXT\",\"tokenCount\":43}],\"candidatesTokensDetails\":[{\"modality\":\"TEXT\",\"tokenCount\":597}]},\"modelVersion\":\"gemini-2.0-flash\"}', 'Web Developer', 'HTML', 1, 'gorea722@gamil.com', '2025-04-06 15:54:24'),
(70, '67f76afb0052a', '{\"candidates\":[{\"content\":{\"parts\":[{\"text\":\"\\n[\\n  {\\n    \\\"question\\\": \\\"Describe a project where you used Python to analyze data. What were the objectives, the data sources, the libraries you used, and the key insights you gained?\\\",\\n    \\\"answer\\\": \\\"This question assesses your practical application of Python in data analysis.  Look for answers that demonstrate a clear understanding of the project lifecycle. \\\\n\\\\n**Example Answer:**  \\\\\\\"In a project to analyze customer churn for a subscription-based service, the objective was to identify factors contributing to churn and predict future churn risk.  Data sources included customer demographics, usage statistics, and support ticket history stored in a PostgreSQL database. I used pandas for data manipulation and cleaning, NumPy for numerical calculations, matplotlib and seaborn for visualization, and scikit-learn for building a logistic regression model.  Key insights revealed that customers with low usage frequency, frequent support requests, and incomplete profile information had a significantly higher churn rate.  This led to targeted interventions, such as proactive support outreach and personalized onboarding, which reduced churn by 15% within the following quarter.\\\\\\\"\\\"\\n  },\\n  {\\n    \\\"question\\\": \\\"Explain the difference between lists, tuples, sets, and dictionaries in Python. When would you choose one over the other for data analysis tasks?\\\",\\n    \\\"answer\\\": \\\"This question tests your understanding of fundamental Python data structures and their appropriate usage. \\\\n\\\\n**Example Answer:** \\\\\\\"Lists are ordered, mutable collections that allow duplicate elements. Tuples are ordered, *immutable* collections, also allowing duplicates. Sets are unordered collections of unique elements. Dictionaries are unordered collections of key-value pairs, where keys must be unique. \\\\n\\\\nI would choose a **list** when I need an ordered collection of items that I might need to modify or add to. A **tuple** is useful when I want to ensure that the data remains constant, for example, storing coordinates or configurations.  A **set** is ideal when I need to quickly check for membership or remove duplicate entries. A **dictionary** is excellent for storing and retrieving data based on a unique key, like storing user information based on their ID.\\\\\\\"\\\"\\n  },\\n  {\\n    \\\"question\\\": \\\"You\'re given a dataset with missing values. Describe your approach to handling missing data using Python. What techniques would you consider, and how would you decide which one to use?\\\",\\n    \\\"answer\\\": \\\"This question evaluates your ability to handle a common data cleaning challenge.  The answer should showcase a systematic approach. \\\\n\\\\n**Example Answer:** \\\\\\\"My approach to handling missing data involves several steps: 1. **Identify and Quantify:**  First, I\'d identify which columns have missing values and calculate the percentage of missing data in each column using pandas. 2. **Understand the Nature of Missingness:** I\'d investigate *why* the data is missing.  Is it Missing Completely at Random (MCAR), Missing at Random (MAR), or Missing Not at Random (MNAR)?  This understanding influences the choice of imputation method. 3. **Imputation Techniques:**  Depending on the nature and amount of missing data, I\'d consider:  *   **Deletion:**  If a column has a high percentage of missing values (e.g., >50%) or if the missingness is MNAR and not easily addressable, I might remove the column.  Similarly, rows with missing values could be removed, but only if the number of rows is small. *   **Mean\\/Median\\/Mode Imputation:** For numerical data, I might use the mean or median for imputation. For categorical data, I\'d use the mode. *   **Regression Imputation:**  I could build a regression model to predict the missing values based on other features. *   **K-Nearest Neighbors (KNN) Imputation:**  KNN can impute missing values based on the values of similar data points. 4. **Evaluation:**  After imputation, I\'d evaluate the impact of the chosen method on the distribution of the data and the performance of any downstream models.\\\\\\\"\\\"\\n  },\\n  {\\n    \\\"question\\\": \\\"Explain how you would use Python to perform exploratory data analysis (EDA) on a new dataset. What are some of the key steps and libraries you would utilize?\\\",\\n    \\\"answer\\\": \\\"This assesses your understanding of the EDA process, a critical step in data analysis. \\\\n\\\\n**Example Answer:** \\\\\\\"For EDA, I\'d start by loading the data into a pandas DataFrame. Then I would: 1.  **Basic Information:** Use `df.head()`, `df.tail()`, `df.info()`, and `df.describe()` to get a general overview of the data types, missing values, and summary statistics. 2.  **Data Cleaning:**  Handle missing values, outliers, and inconsistencies (e.g., incorrect data types). 3.  **Univariate Analysis:** Analyze each variable individually using histograms (for numerical data) and bar plots (for categorical data) to understand their distributions.  `matplotlib` and `seaborn` are useful for creating these visualizations. 4.  **Bivariate Analysis:** Explore relationships between variables using scatter plots (for numerical-numerical), box plots (for numerical-categorical), and count plots (for categorical-categorical). Calculate correlation matrices (using `df.corr()`) to identify potential linear relationships. 5.  **Multivariate Analysis:** Use techniques like pair plots (in `seaborn`) or PCA (using `scikit-learn`) to explore relationships between multiple variables simultaneously. I would look for patterns, outliers, and potential features for further analysis or model building.\\\\\\\"\\\"\\n  },\\n  {\\n    \\\"question\\\": \\\"Describe how you would use Python and its libraries to build and evaluate a simple machine learning model (e.g., a linear regression model). Include steps for data preprocessing, model training, and performance evaluation.\\\",\\n    \\\"answer\\\": \\\"This question assesses your basic understanding of machine learning workflow using Python.  Focus on outlining the key steps and libraries. \\\\n\\\\n**Example Answer:** \\\\\\\"To build and evaluate a linear regression model, I would: 1.  **Data Preprocessing:**  *   Load the data using pandas. *   Handle missing values (as discussed before). *   Encode categorical variables using techniques like one-hot encoding (using `pd.get_dummies()` or `sklearn.preprocessing.OneHotEncoder`). *   Scale numerical features using `sklearn.preprocessing.StandardScaler` or `MinMaxScaler` to improve model performance. 2.  **Data Splitting:** Split the data into training and testing sets using `sklearn.model_selection.train_test_split`. 3.  **Model Training:** *   Import the `LinearRegression` model from `sklearn.linear_model`. *   Create an instance of the model: `model = LinearRegression()`. *   Train the model using the training data: `model.fit(X_train, y_train)`. 4.  **Model Evaluation:** *   Make predictions on the test set: `y_pred = model.predict(X_test)`. *   Evaluate the model using appropriate metrics, such as Mean Squared Error (MSE), Root Mean Squared Error (RMSE), or R-squared (using `sklearn.metrics`). *   Visualize the predictions versus actual values using matplotlib.\\\\\\\"\\\"\\n  }\\n]\\n\"}],\"role\":\"model\"},\"finishReason\":\"STOP\",\"citationMetadata\":{\"citationSources\":[{\"startIndex\":2940,\"endIndex\":3088,\"uri\":\"https:\\/\\/marketsplash.com\\/how-to-handle-missing-values-in-r\\/\"},{\"startIndex\":6611,\"endIndex\":6746,\"uri\":\"https:\\/\\/github.com\\/ezybodex\\/META_Stock_Price_Prediction\"},{\"startIndex\":6750,\"endIndex\":6894,\"uri\":\"https:\\/\\/github.com\\/hoda-daly\\/AI_Project\"}]},\"avgLogprobs\":-0.2990960970969631}],\"usageMetadata\":{\"promptTokenCount\":43,\"candidatesTokenCount\":1561,\"totalTokenCount\":1604,\"promptTokensDetails\":[{\"modality\":\"TEXT\",\"tokenCount\":43}],\"candidatesTokensDetails\":[{\"modality\":\"TEXT\",\"tokenCount\":1561}]},\"modelVersion\":\"gemini-2.0-flash\"}', 'data analyst', 'python', 1, 'gorea722@gamil.com', '2025-04-10 06:53:57'),
(71, '67ffb1e71e672', '{\"candidates\":[{\"content\":{\"parts\":[{\"text\":\"\\n[\\n  {\\n    \\\"question\\\": \\\"Describe your experience with pointers in C. Can you give an example of a common mistake when using pointers and how you would avoid it?\\\",\\n    \\\"answer\\\": \\\"I have extensive experience working with pointers in C. I\'ve used them for dynamic memory allocation, implementing data structures like linked lists and trees, and passing function arguments by reference. A common mistake is dereferencing a null or uninitialized pointer, which leads to segmentation faults. To avoid this, I always initialize pointers to NULL or a valid memory address, and I use defensive programming techniques like null checks before dereferencing them. I also use tools like Valgrind to detect memory leaks and other pointer-related errors.\\\"\\n  },\\n  {\\n    \\\"question\\\": \\\"Explain the difference between `malloc` and `calloc` in C. When would you prefer one over the other?\\\",\\n    \\\"answer\\\": \\\"`malloc` and `calloc` are both used for dynamic memory allocation in C. `malloc` allocates a block of memory of a specified size, but the memory is not initialized. `calloc` allocates a block of memory for an array of elements, all of which are initialized to zero. I would prefer `calloc` when I need to allocate memory for an array and ensure that the elements are initialized to zero, as this eliminates the need for a separate initialization step. I would prefer `malloc` when I need to allocate a block of memory and don\'t need it to be initialized or when the zero-initialization overhead of `calloc` is a concern for performance.\\\"\\n  },\\n  {\\n    \\\"question\\\": \\\"How do you handle memory leaks in C? Describe the strategies and tools you use to identify and prevent them.\\\",\\n    \\\"answer\\\": \\\"Memory leaks are a serious concern in C. To handle them, I follow these strategies: 1. **Careful allocation and deallocation:** Ensure every `malloc` or `calloc` call is paired with a corresponding `free`. 2. **Avoid dangling pointers:** Ensure that pointers are not referencing memory that has already been freed.  3. **Use RAII-like patterns (though not strictly RAII in C):** When possible, encapsulate memory allocation and deallocation within a function or struct so that deallocation is guaranteed. 4. **Use debugging tools:**  I regularly use Valgrind (specifically Memcheck) to detect memory leaks.  I also sometimes manually review code for potential allocation\\/deallocation mismatches.  For smaller projects, I\'ve used `mtrace` for tracing memory allocations and deallocations. 5. **Coding standards and reviews:** Following coding standards and conducting code reviews help to catch potential memory leaks early in the development process.\\\"\\n  },\\n  {\\n    \\\"question\\\": \\\"Describe how you would implement a simple linked list in C. What are the advantages and disadvantages of using linked lists compared to arrays?\\\",\\n    \\\"answer\\\": \\\"A simple linked list in C can be implemented by defining a structure for the node, which contains a data field and a pointer to the next node. I would then create functions for inserting, deleting, and traversing nodes in the list. Advantages of linked lists compared to arrays include: dynamic size (no need to predefine the size), easier insertion and deletion of elements (no need to shift elements). Disadvantages include: random access is not efficient (must traverse from the head), requires more memory due to the pointer overhead, and potentially worse cache performance due to scattered memory locations.\\\"\\n  },\\n  {\\n    \\\"question\\\": \\\"Explain the concept of preprocessor directives in C. Give examples of common preprocessor directives and their uses. How can they be helpful and when should they be used cautiously?\\\",\\n    \\\"answer\\\": \\\"Preprocessor directives are instructions to the C preprocessor, which modifies the source code before it is compiled. Common directives include: `#include` (includes header files), `#define` (defines macros), `#ifdef`, `#ifndef`, `#endif` (conditional compilation). They are helpful for: 1. **Code organization:** Including header files to manage dependencies. 2. **Conditional compilation:** Enabling or disabling code based on certain conditions (e.g., debugging mode). 3. **Macro definitions:** Creating shorthand aliases for constants or code snippets. They should be used cautiously because overuse of macros can make code harder to debug and maintain due to lack of type checking and potential side effects. Excessive conditional compilation can also lead to complex and difficult-to-understand code. It\'s often better to use `const` variables instead of macros for constants, and functions instead of complex macro expressions where possible.\\\"\\n  }\\n]\\n\\n\"}],\"role\":\"model\"},\"finishReason\":\"STOP\",\"avgLogprobs\":-0.3449107657233588}],\"usageMetadata\":{\"promptTokenCount\":44,\"candidatesTokenCount\":973,\"totalTokenCount\":1017,\"promptTokensDetails\":[{\"modality\":\"TEXT\",\"tokenCount\":44}],\"candidatesTokensDetails\":[{\"modality\":\"TEXT\",\"tokenCount\":973}]},\"modelVersion\":\"gemini-2.0-flash\"}', 'software developer', 'c programming ', 2, 'gorea722@gamil.com', '2025-04-16 13:34:38'),
(72, '67ffd1ae5951a', '{\"candidates\":[{\"content\":{\"parts\":[{\"text\":\"\\n[\\n  {\\n    \\\"question\\\": \\\"Explain the difference between `malloc()` and `calloc()` in C. When would you use one over the other?\\\",\\n    \\\"answer\\\": \\\"Both `malloc()` and `calloc()` are used for dynamic memory allocation in C.\\\\n\\\\n*   `malloc()` allocates a block of memory of a specified size. The memory is uninitialized, meaning it contains whatever values were previously stored in those memory locations.\\\\n*   `calloc()` allocates a block of memory for a specified number of elements, each of a specified size. Crucially, `calloc()` initializes all bytes in the allocated memory to zero.\\\\n\\\\n\\\\nUse `malloc()` when:\\\\n*   You need a specific amount of memory and don\'t care about its initial content.\\\\n*   You\'re going to immediately overwrite the allocated memory with meaningful data anyway.\\\\n\\\\nUse `calloc()` when:\\\\n*   You need to ensure the allocated memory starts with a clean, known state (all zeros).\\\\n*   For example, initializing an array where you want all elements to start at zero. This is often useful with numeric computations.\\\\n\\\\nWhile `calloc()` initializes memory, it generally has a small performance overhead compared to `malloc()` due to the extra step of zeroing the memory.  Consider this trade-off between initialization convenience and potential performance when choosing between the two.\\\"\\n  },\\n  {\\n    \\\"question\\\": \\\"Describe the difference between pass-by-value and pass-by-reference in Java. How does Java handle objects when passed as arguments to methods?\\\",\\n    \\\"answer\\\": \\\"Java is strictly pass-by-value. This means that when you pass a variable to a method, a *copy* of the variable\'s value is passed to the method.\\\\n\\\\n*   **Primitive types:** When you pass a primitive type (like `int`, `double`, `boolean`), the method receives a copy of the *value* of the primitive. Modifying the parameter inside the method will *not* affect the original variable outside the method.\\\\n\\\\n*   **Objects:** When you pass an object (more accurately, a reference to an object), the method receives a copy of the *reference*. Both the original reference and the copied reference point to the *same object* in memory.  Therefore, if the method modifies the *state* of the object (e.g., changes a field of the object), these changes *will* be visible outside the method because both references point to the same object. However, if the method reassigns the parameter to point to a *new* object, the original reference outside the method will *not* be changed, and it will still point to the original object.  This can be a common source of confusion.\\\\n\\\\nIn summary, Java passes copies of the *values* of variables. For objects, the value of the variable is the reference to the object.\\\"\\n  },\\n  {\\n    \\\"question\\\": \\\"Explain the concept of pointers in C. What are some common uses of pointers, and what are some potential dangers associated with using them?\\\",\\n    \\\"answer\\\": \\\"A pointer in C is a variable that stores the memory address of another variable. It \'points to\' a specific location in memory where a value of a certain data type is stored. \\\\n\\\\n**Common Uses:**\\\\n\\\\n*   **Dynamic memory allocation:**  `malloc()`, `calloc()`, `realloc()` return pointers to allocated memory blocks.\\\\n*   **Passing arguments by reference:**  Modifying the value of a variable in a function.\\\\n*   **Accessing array elements efficiently:**  Pointers can be incremented to move through an array without using array indexing (e.g., `*(array + i)`).\\\\n*   **Data structures (linked lists, trees):** Pointers are essential for creating and traversing these structures.\\\\n*   **Function pointers:**  Storing the address of a function, allowing functions to be passed as arguments to other functions (callbacks).\\\\n\\\\n**Potential Dangers:**\\\\n\\\\n*   **Memory leaks:**  Forgetting to `free()` dynamically allocated memory results in a memory leak, where the memory becomes unusable.\\\\n*   **Dangling pointers:** A pointer that points to memory that has already been freed. Dereferencing a dangling pointer leads to undefined behavior (segmentation fault, crashes, corrupted data).\\\\n*   **Segmentation faults:**  Accessing memory outside the bounds of an allocated block or attempting to dereference a null pointer.\\\\n*   **Buffer overflows:**  Writing data beyond the allocated size of a buffer, corrupting adjacent memory.\\\\n*   **Type errors:** Using a pointer of the wrong type to access memory can lead to data corruption or misinterpretation.\\\\n\\\\nPointers are powerful but require careful management to avoid these pitfalls.  Proper coding practices, like always initializing pointers, checking for null pointers before dereferencing, and carefully managing memory allocation\\/deallocation, are crucial.\\\"\\n  },\\n  {\\n    \\\"question\\\": \\\"Describe the difference between an Interface and an Abstract Class in Java. When would you use one over the other?\\\",\\n    \\\"answer\\\": \\\"Both interfaces and abstract classes are used to achieve abstraction in Java, but they have key differences:\\\\n\\\\n*   **Abstract Class:**\\\\n    *   Can have abstract methods (methods without implementation) and concrete methods (methods with implementation).\\\\n    *   Can have instance variables (fields).\\\\n    *   A class can extend only one abstract class (single inheritance).\\\\n    *   Can have constructors.\\\\n    *   The `abstract` keyword is used to declare an abstract class or method.\\\\n\\\\n*   **Interface:**\\\\n    *   Can only have abstract methods (before Java 8).  From Java 8 onwards, interfaces can also have default methods (methods with implementation) and static methods.\\\\n    *   Cannot have instance variables (fields).  Can only have `static final` constants.\\\\n    *   A class can implement multiple interfaces (multiple inheritance).\\\\n    *   Cannot have constructors.\\\\n    *   The `interface` keyword is used to declare an interface.\\\\n\\\\n**When to use which:**\\\\n\\\\n*   **Abstract Class:**\\\\n    *   When you have a clear \'is-a\' relationship between classes.\\\\n    *   When you want to provide a common implementation for some methods that derived classes can inherit and reuse.\\\\n    *   When you need to have instance variables (state) that are shared among subclasses.\\\\n    *   When you need constructors (though subclasses must call them).\\\\n\\\\n*   **Interface:**\\\\n    *   When you want to define a contract for classes to adhere to, regardless of their inheritance hierarchy.  This is often described as an \\\"is-able-to\\\" relationship.\\\\n    *   When you want to achieve multiple inheritance.\\\\n    *   When you primarily care about defining the *behavior* of classes, not necessarily their internal state or implementation details.\\\\n\\\\nIn essence, abstract classes are used for defining a *type* with some implementation, while interfaces are used for defining a *role* or *capability* that classes can fulfill.  Default methods in interfaces (Java 8+) blur the lines somewhat, allowing interfaces to provide some implementation as well, but the core principle remains the same.\\\"\\n  },\\n  {\\n    \\\"question\\\": \\\"Write a C program snippet that reverses a string in-place (without using extra memory for a new string).\\\",\\n    \\\"answer\\\": \\\"c\\\\n#include <stdio.h>\\\\n#include <string.h>\\\\n\\\\nvoid reverseString(char *str) {\\\\n    if (str == NULL) {\\\\n        return; \\/\\/ Handle null pointer\\\\n    }\\\\n\\\\n    int len = strlen(str);\\\\n    int i, j;\\\\n    char temp;\\\\n\\\\n    for (i = 0, j = len - 1; i < j; i++, j--) {\\\\n        temp = str[i];\\\\n        str[i] = str[j];\\\\n        str[j] = temp;\\\\n    }\\\\n}\\\\n\\\\nint main() {\\\\n    char myString[] = \\\\\\\"hello\\\\\\\";\\\\n    printf(\\\\\\\"Original string: %s\\\\\\\\n\\\\\\\", myString);\\\\n    reverseString(myString);\\\\n    printf(\\\\\\\"Reversed string: %s\\\\\\\\n\\\\\\\", myString);\\\\n    return 0;\\\\n}\\\\n\\\\n\\\\n**Explanation:**\\\\n\\\\n1.  **`reverseString(char *str)`:** This function takes a character pointer `str` as input, representing the string to be reversed.\\\\n2.  **Null Check:** The function first checks if the input string pointer is `NULL`. If it is, it returns to prevent dereferencing a null pointer.\\\\n3.  **`strlen(str)`:** Calculates the length of the string using `strlen()`.\\\\n4.  **Two Pointers:**  Two index variables, `i` and `j`, are initialized. `i` starts at the beginning of the string (index 0), and `j` starts at the end of the string (index `len - 1`).\\\\n5.  **Loop:** The `for` loop continues as long as `i` is less than `j`. This ensures that the entire string is traversed from both ends towards the middle.\\\\n6.  **Swap:** Inside the loop:\\\\n    *   `temp = str[i];`: The character at the `i`-th position is stored in a temporary variable `temp`.\\\\n    *   `str[i] = str[j];`: The character at the `j`-th position is copied to the `i`-th position.\\\\n    *   `str[j] = temp;`: The character stored in `temp` (originally from the `i`-th position) is copied to the `j`-th position.\\\\n    *   `i++`, `j--`:  The `i` index is incremented, moving towards the end of the string, and the `j` index is decremented, moving towards the beginning of the string.\\\\n7.  **In-Place:** The string is reversed directly in memory, without creating a new string.  This is what makes it an in-place reversal.\\\\n\\\\n**Important Considerations:**\\\\n*   **String Mutability:**  This code modifies the original string. If the string is a string literal (e.g., `char *str = \\\"hello\\\";`), attempting to modify it will result in undefined behavior (usually a segmentation fault) because string literals are typically stored in read-only memory. Make sure the string is a mutable array like in the `main` function of the example.\\\\n*   **Null Termination:** The string remains null-terminated after the reversal, as the reversal only swaps characters within the existing string boundaries. The null terminator stays at the same place.\\\"\\n  }\\n]\\n\\n\"}],\"role\":\"model\"},\"finishReason\":\"STOP\",\"citationMetadata\":{\"citationSources\":[{\"startIndex\":8035,\"endIndex\":8180},{\"startIndex\":8733,\"endIndex\":8889}]},\"avgLogprobs\":-0.28335393465985165}],\"usageMetadata\":{\"promptTokenCount\":46,\"candidatesTokenCount\":2334,\"totalTokenCount\":2380,\"promptTokensDetails\":[{\"modality\":\"TEXT\",\"tokenCount\":46}],\"candidatesTokensDetails\":[{\"modality\":\"TEXT\",\"tokenCount\":2334}]},\"modelVersion\":\"gemini-2.0-flash\"}', 'software developer', 'c programming, java', 1, 'gorea722@gamil.com', '2025-04-16 15:50:22'),
(73, '67ffd7e9dba58', '{\"candidates\":[{\"content\":{\"parts\":[{\"text\":\"\\n[\\n  {\\n    \\\"question\\\": \\\"Describe a time you used C to solve a problem. What were the challenges you faced and how did you overcome them?\\\",\\n    \\\"answer\\\": \\\"This question assesses your practical experience with C and your problem-solving skills.  A good answer would involve a specific project (even a small one from school or a personal project), detailing the problem, the approach used in C, any difficulties encountered (like memory management, debugging, or pointer issues), and how those difficulties were addressed.  Example: \\\\\\\"In my university project, I used C to implement a basic network packet sniffer. The main challenge was managing memory effectively, especially when dealing with incoming packet data. I used dynamic memory allocation with `malloc` and `free`, but I initially ran into memory leaks. I addressed this by implementing careful tracking of allocated memory and using a debugger (like `gdb`) to identify the leaks.  I also had to handle different network packet formats, which required bit manipulation and understanding of network protocols.  I used bitwise operators and carefully structured my code to handle these different formats.\\\\\\\"\\\"\\n  },\\n  {\\n    \\\"question\\\": \\\"Explain the difference between `malloc` and `calloc` in C. When would you choose one over the other?\\\",\\n    \\\"answer\\\": \\\"This tests your understanding of memory management in C.  A good answer would highlight the key differences and provide context for choosing the right function. \\\\\\\"Both `malloc` and `calloc` are used for dynamic memory allocation in C.  `malloc` allocates a block of memory of the specified size, but it doesn\'t initialize the memory. The content of the allocated memory is undefined. `calloc`, on the other hand, allocates a block of memory for an array of a specified number of elements, each of a certain size, and *initializes all bytes of the allocated memory to zero*. I would choose `calloc` when I need the memory to be initialized to zero, which is often useful for arrays or data structures that rely on initial zero values. If I don\'t need the memory initialized and am only concerned with allocating a specific size, `malloc` is often preferred because it can be slightly faster as it skips the initialization step.\\\\\\\"\\\"\\n  },\\n  {\\n    \\\"question\\\": \\\"Give an example of using pointers in C and explain the benefit of using them.\\\",\\n    \\\"answer\\\": \\\"This checks your fundamental C knowledge. A good answer would provide a clear and concise example.  \\\\\\\"Pointers are variables that store the memory address of another variable.  For example:\\\\nc\\\\nint num = 10;\\\\nint *ptr = &num; \\/\\/ ptr now holds the address of num\\\\nprintf(\\\\\\\"Value of num: %d\\\\\\\\n\\\\\\\", num);\\\\nprintf(\\\\\\\"Address of num: %p\\\\\\\\n\\\\\\\", &num);\\\\nprintf(\\\\\\\"Value of ptr: %p\\\\\\\\n\\\\\\\", ptr);\\\\nprintf(\\\\\\\"Value pointed to by ptr: %d\\\\\\\\n\\\\\\\", *ptr); \\/\\/ Dereferencing the pointer\\\\n\\\\nThe benefits of using pointers include:\\\\n*   **Direct Memory Access:**  Pointers allow you to directly manipulate memory locations, which is essential for many tasks like dynamic memory allocation, working with arrays, and optimizing performance.\\\\n*   **Passing by Reference:** Pointers allow you to pass variables \'by reference\' to functions. This means that the function can modify the original variable, not just a copy. This is useful for functions that need to update multiple values.\\\\n*   **Data Structures:** Pointers are crucial for building complex data structures like linked lists, trees, and graphs.\\\\n*   **Performance:** Using pointers can sometimes improve performance, especially when working with large data sets, by avoiding the overhead of copying data.\\\\\\\"\\\"\\n  },\\n  {\\n    \\\"question\\\": \\\"Describe your experience with Java. Have you worked on any projects using Java, and if so, what technologies (e.g., frameworks, libraries) did you utilize?\\\",\\n    \\\"answer\\\": \\\"This probes your Java skills and related tool knowledge. A good answer would include a description of a specific project if possible, emphasizing the tools and technologies used. \\\\\\\"I have primarily used Java for developing backend services and web applications. In my internship, I worked on a project that involved building a REST API for managing user data. I used Spring Boot as the framework to handle dependency injection, routing, and data persistence. For the database, I used MySQL and JPA (Java Persistence API) with Hibernate as the ORM (Object-Relational Mapping) framework. I also used JUnit for writing unit tests and Maven for dependency management and build automation. I also have experience using Java for building simple console applications during my academic studies.\\\\\\\"\\\"\\n  },\\n  {\\n    \\\"question\\\": \\\"Explain the concept of Object-Oriented Programming (OOP) in Java, and give examples of the four main principles: Encapsulation, Inheritance, Polymorphism, and Abstraction.\\\",\\n    \\\"answer\\\": \\\"This assesses your understanding of core Java concepts. A strong answer would define each principle and provide clear, concise examples. \\\\\\\"Object-Oriented Programming (OOP) is a programming paradigm based on the concept of \'objects\', which contain data (fields) and code (methods) that operate on that data. The four main principles of OOP are:\\\\n\\\\n*   **Encapsulation:** Bundling data (attributes) and methods that operate on that data within a single unit (a class), and restricting direct access to some of the object\'s components.  Example: A `BankAccount` class with a private `balance` attribute and public methods like `deposit()` and `withdraw()`.  External code cannot directly modify the `balance`; it must use the provided methods.\\\\n*   **Inheritance:**  Creating new classes (subclasses or derived classes) from existing classes (superclasses or base classes), inheriting their properties and behaviors.  Example: A `SavingsAccount` class that inherits from a `BankAccount` class. The `SavingsAccount` automatically has the `balance`, `deposit()`, and `withdraw()` functionality, and can add its own specific features like interest calculation.\\\\n*   **Polymorphism:** The ability of an object to take on many forms. This is often achieved through method overriding (runtime polymorphism) and method overloading (compile-time polymorphism). Example: A `Shape` interface with a `draw()` method.  Different classes like `Circle` and `Square` can implement the `Shape` interface and provide their own specific implementations of the `draw()` method.\\\\n*   **Abstraction:**  Hiding complex implementation details and exposing only the essential information to the user.  Example: A `Car` object provides an `accelerate()` method. The user doesn\'t need to know the internal combustion process or how the engine works; they only need to know that calling `accelerate()` makes the car go faster.\\\\\\\"\\\"\\n  }\\n]\\n\"}],\"role\":\"model\"},\"finishReason\":\"STOP\",\"citationMetadata\":{\"citationSources\":[{\"startIndex\":4957,\"endIndex\":5084,\"uri\":\"https:\\/\\/blog.kirilkirkov.com\\/p\\/understanding-object-oriented-programming-in-php\"}]},\"avgLogprobs\":-0.3576522211703538}],\"usageMetadata\":{\"promptTokenCount\":46,\"candidatesTokenCount\":1438,\"totalTokenCount\":1484,\"promptTokensDetails\":[{\"modality\":\"TEXT\",\"tokenCount\":46}],\"candidatesTokensDetails\":[{\"modality\":\"TEXT\",\"tokenCount\":1438}]},\"modelVersion\":\"gemini-2.0-flash\"}', 'software developer', 'c programming, java', 1, 'gorea722@gamil.com', '2025-04-16 16:16:52');
INSERT INTO `interviews` (`id`, `mockid`, `jsonmockresponse`, `job_position`, `job_description`, `job_experience`, `created_by`, `created_at`) VALUES
(74, '6800bceb5ac29', '{\"candidates\":[{\"content\":{\"parts\":[{\"text\":\"\\n[\\n  {\\n    \\\"question\\\": \\\"Describe a time you used Python to analyze a dataset. What were the challenges you faced, and how did you overcome them?\\\",\\n    \\\"answer\\\": \\\"This question aims to assess your practical Python skills in a data analysis context. A good answer would involve describing a specific project, highlighting the purpose, data source, tools\\/libraries used (e.g., pandas, NumPy, matplotlib, scikit-learn), and the results obtained. Common challenges to mention include data cleaning, handling missing values, dealing with large datasets, and interpreting statistical results.  Explain how you addressed these challenges, demonstrating problem-solving skills and a practical understanding of data analysis techniques.  For example, \'In a project analyzing customer churn, I used pandas to clean the data, handling missing values with imputation techniques. I used scikit-learn for logistic regression to predict churn. The biggest challenge was imbalanced data, which I addressed using oversampling techniques.  The result was a model that accurately predicted churn with improved recall.\'\\\"\\n  },\\n  {\\n    \\\"question\\\": \\\"Explain the difference between \'list\' and \'tuple\' data structures in Python and when you would choose one over the other in a data analysis context.\\\",\\n    \\\"answer\\\": \\\"This tests your fundamental Python knowledge and understanding of data structure choices. The correct answer would include:\\\\n\\\\n*   **List:** Mutable (elements can be changed), denoted by square brackets `[]`.\\\\n*   **Tuple:** Immutable (elements cannot be changed after creation), denoted by parentheses `()`.\\\\n\\\\nGood use cases:\\\\n*   **List:** When you need to modify the data, such as adding new data points or updating existing values (e.g., collecting real-time sensor readings).\\\\n*   **Tuple:** When you want to ensure data integrity or use the data as a key in a dictionary (tuples are hashable) or as data that should not be modified after it\'s created (e.g., representing geographic coordinates). For example: \'Lists are mutable, useful for datasets that need modification. Tuples are immutable, great for representing fixed datasets or keys in dictionaries, enhancing data integrity.\'\\\"\\n  },\\n  {\\n    \\\"question\\\": \\\"Describe how you would handle missing values in a dataset using Python and the pandas library. What are some common imputation techniques, and what factors would influence your choice?\\\",\\n    \\\"answer\\\": \\\"This evaluates your ability to deal with a common data problem. The answer should include:\\\\n\\\\n*   **Identifying Missing Values:** Use `isnull()` or `isna()` methods in pandas to detect missing values (usually represented as NaN).  `df.isnull().sum()` is useful to count them by column.\\\\n*   **Handling Missing Values:**\\\\n    *   **Deletion:** Remove rows or columns with missing values (use `dropna()`).  Mention that this should be done cautiously, as it can lead to information loss.\\\\n    *   **Imputation:** Replace missing values with estimated values. Common techniques include:\\\\n        *   **Mean\\/Median Imputation:** Replace with the mean or median of the column (use `fillna()`). Suitable for numerical data.\\\\n        *   **Mode Imputation:** Replace with the mode (most frequent value) of the column. Suitable for categorical data.\\\\n        *   **Forward\\/Backward Fill:** Fill missing values with the previous or next valid value. Useful for time series data.\\\\n        *   **Regression Imputation:** Predict missing values using a regression model.\\\\n        *   **K-Nearest Neighbors (KNN) Imputation:** Use KNN to predict missing values based on similar data points.\\\\n*   **Factors Influencing Choice:**\\\\n    *   **Type of Data:** Numerical vs. Categorical.\\\\n    *   **Amount of Missing Data:** If a column has a large percentage of missing values, imputation might introduce significant bias.  Consider dropping the column.\\\\n    *   **Distribution of Data:** Mean imputation is sensitive to outliers. Median imputation is more robust.\\\\n    *   **Domain Knowledge:** Understanding the context of the data can help choose the most appropriate imputation method. For example: \'I\'d first identify missing values with pandas. Then, I\'d consider mean imputation for numerical data with minimal outliers, median imputation for data with outliers, and mode imputation for categorical data. If a significant portion of data is missing, I would consider dropping the column.\'\\\"\\n  },\\n  {\\n    \\\"question\\\": \\\"You have two pandas DataFrames that you need to combine. Explain the different ways you can combine them (e.g., merge, join, concatenate) and when you would use each approach.\\\",\\n    \\\"answer\\\": \\\"This tests your knowledge of pandas DataFrame manipulation.\\\\n\\\\n*   **Concatenate (pd.concat):** Stacks DataFrames on top of each other (along rows) or side by side (along columns). Use when you have DataFrames with the same columns (for stacking) or the same index (for side-by-side).  Specify `axis=0` (default) to stack and `axis=1` to combine side-by-side. It also handles duplicate indices and columns according to the parameters specified.\\\\n*   **Merge (pd.merge):** Similar to SQL JOIN. Combines DataFrames based on one or more common columns.  Specify `on`, `left_on`, `right_on`, `left_index`, `right_index`, and `how` (inner, left, right, outer) parameters.\\\\n*   **Join (df.join):** Combines DataFrames based on their indices (or a specific column). By default, it performs a left join on the index.  Can be used similarly to `merge` but often simpler if you\'re joining on the index.\\\\n\\\\nExample usage:\\\\n*   **Concatenate:** Combining data from multiple CSV files with the same structure.\\\\n*   **Merge:** Combining customer data with order data based on a \'customer_id\' column.\\\\n*   **Join:** Joining two DataFrames where the index represents a unique identifier.\\\\n\\\\nFor example: \'I\'d use pd.concat to stack dataframes with same columns. I would use merge if they have common column names, especially if the data should relate like customer IDs between order information and customer data. I\'d use join when they both have meaningful indices, making it easier to combine data based on those keys.\'\\\"\\n  },\\n  {\\n    \\\"question\\\": \\\"Describe your experience with data visualization using Python. Which libraries have you used, and what are some best practices you follow when creating visualizations?\\\",\\n    \\\"answer\\\": \\\"This explores your ability to communicate data insights effectively. The answer should include:\\\\n\\\\n*   **Libraries Used:** Mention libraries like `matplotlib`, `seaborn`, `plotly`, and `bokeh`. Describe your familiarity with each.\\\\n*   **Types of Visualizations:** Explain your experience creating different types of charts (e.g., bar charts, line charts, scatter plots, histograms, box plots, heatmaps) and when each is appropriate.\\\\n*   **Best Practices:**\\\\n    *   **Clear and Concise Titles and Labels:** Make sure visualizations are easy to understand.\\\\n    *   **Appropriate Color Choices:** Use colors effectively to highlight key information and avoid confusing color combinations.\\\\n    *   **Choosing the Right Chart Type:** Select a chart type that best represents the data and answers the question you\'re trying to address.\\\\n    *   **Avoiding Clutter:** Remove unnecessary elements that distract from the data.\\\\n    *   **Consider Your Audience:** Tailor the visualization to the knowledge and interests of your audience.\\\\n    *   **Using appropriate scales:** Linear vs logarithmic scale for axes.\\\\n    *   **Annotation and explanation of key trends.**\\\\nFor example: \'I\'ve used matplotlib and seaborn extensively. I prefer seaborn for its aesthetics and statistical plots. I aim to create clear titles, use meaningful axis labels, and select appropriate color palettes. I carefully choose the chart type, such as bar charts for comparing categories or scatter plots for showing relationships between variables. I also annotate to make the key data more visible.\'\\\"\\n  }\\n]\\n\\n\"}],\"role\":\"model\"},\"finishReason\":\"STOP\",\"avgLogprobs\":-0.4809858387154282}],\"usageMetadata\":{\"promptTokenCount\":43,\"candidatesTokenCount\":1731,\"totalTokenCount\":1774,\"promptTokensDetails\":[{\"modality\":\"TEXT\",\"tokenCount\":43}],\"candidatesTokensDetails\":[{\"modality\":\"TEXT\",\"tokenCount\":1731}]},\"modelVersion\":\"gemini-2.0-flash\"}', 'data analyst', 'Python', 1, 'gorea722@gamil.com', '2025-04-17 08:34:01');

-- --------------------------------------------------------

--
-- Table structure for table `useranswer`
--

CREATE TABLE `useranswer` (
  `id` int(11) NOT NULL,
  `mockIdRef` varchar(255) NOT NULL,
  `question` varchar(1000) NOT NULL,
  `correctAns` text DEFAULT NULL,
  `userAns` text DEFAULT NULL,
  `feedback` text DEFAULT NULL,
  `rating` varchar(50) DEFAULT NULL,
  `userEmail` varchar(255) DEFAULT NULL,
  `createdAt` varchar(255) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;

--
-- Dumping data for table `useranswer`
--

INSERT INTO `useranswer` (`id`, `mockIdRef`, `question`, `correctAns`, `userAns`, `feedback`, `rating`, `userEmail`, `createdAt`) VALUES
(36, '67f24ff010252', 'Describe the difference between `VARCHAR` and `CHAR` data types in SQL. When would you use each?', 'Both `VARCHAR` and `CHAR` store strings, but `CHAR` is fixed-length, padded with spaces if the string is shorter than the defined length, while `VARCHAR` is variable-length, storing only the characters provided. `CHAR` is more efficient if all strings are close to the same length and the length is known beforehand (e.g., storing fixed-length codes). `VARCHAR` is better when string lengths vary significantly, as it saves storage space.', 'In SQL care has fixed size but where care has variable size.', 'Array', '6', 'gorea722@gamil.com', '2025-04-06 15:34:21'),
(37, '67f24ff010252', 'Explain what a primary key is and why it\'s important in a database table.', 'A primary key is a column or set of columns that uniquely identifies each row in a table.  It must contain unique values and cannot contain NULL values. It\'s important because it enforces data integrity, allows for efficient data retrieval (especially in joins with other tables), and is essential for defining relationships between tables (foreign keys referencing the primary key).', 'A primary key is column or columns that contain value uniquely identify each row in table. A database table must have primary key or optimum to insert, update, restore and delete from the database.', 'Array', '7', 'gorea722@gamil.com', '2025-04-06 15:35:18'),
(38, '67f24ff010252', 'What is the purpose of the `GROUP BY` clause in SQL?', 'The `GROUP BY` clause is used to group rows that have the same values in one or more columns into a summary row.  It is typically used in conjunction with aggregate functions (e.g., `COUNT`, `SUM`, `AVG`, `MIN`, `MAX`) to perform calculations on each group. For example, `SELECT department, COUNT(*) FROM employees GROUP BY department` would return the number of employees in each department.', 'The GROUP BY clause causes the rules of the iTunes table to be collected into.', '{\n \"relevance\": \"Very low. The answer mentions \'iTunes table\' which is not a standard SQL concept and doesn\'t explain the purpose of `GROUP BY`.\",\n \"completeness\": \"Incomplete. The answer doesn\'t provide any information about what the `GROUP BY` clause actually does.\",\n \"clarity\": \"Unclear. The phrasing \'rules of the iTunes table to be collected into\' is vague and doesn\'t convey the purpose of the clause.\",\n \"improvement\": \"The answer needs to explain that `GROUP BY` groups rows with the same values in specified columns into summary rows. It should also mention its use with aggregate functions like `COUNT`, `SUM`, `AVG`, etc., to perform calculations on these groups. Finally, provide a simple example.\"\n}', '1', 'gorea722@gamil.com', '2025-04-06 15:36:16'),
(39, '67f24ff010252', 'What is the difference between `WHERE` and `HAVING` clauses in SQL? When would you use each?', 'Both `WHERE` and `HAVING` filter data, but `WHERE` filters rows *before* grouping is applied, while `HAVING` filters groups *after* grouping has been applied by the `GROUP BY` clause. `WHERE` is used to filter individual rows based on their values. `HAVING` is used to filter the results of aggregated data (e.g., groups) based on aggregate function values.', 'In SQL, the where clause filters rose before grouping, while they\'re having clause filters groups after grouping, allowing you to use aggregate functions in the filtering condition.', 'Array', '8', 'gorea722@gamil.com', '2025-04-06 15:37:36'),
(41, '67f25915135c9', 'Explain the difference between `malloc()` and `calloc()` in C. When would you prefer one over the other?', 'Both `malloc()` and `calloc()` are used for dynamic memory allocation in C.  `malloc()` allocates a block of memory of a specified size, but does not initialize the memory. The allocated memory contains garbage values. `calloc()` allocates a block of memory for an array of elements, each of a certain size, and initializes all the allocated memory to zero.  You\'d prefer `calloc()` when you need the memory to be initialized to zero, especially for numerical computations or when dealing with sensitive data.  `malloc()` is generally faster if you don\'t need initialization, as it skips the zeroing step. If performance is critical and initialization isn\'t required, use `malloc()`. If initialized memory is required, use `calloc()`.', 'Nancy Malik allocates a single block of memory of a specified size, leaving the memory.', 'The answer is incomplete and doesn\'t explain the differences between `malloc()` and `calloc()`. It only mentions `malloc()` vaguely and misses key aspects like initialization. The response needs to be expanded to clearly explain both functions and provide scenarios where one is preferred over the other. Also, the sentence \'Nancy Malik allocates a single block of memory\' is irrelevant and should be removed.', '1', 'gorea722@gamil.com', '2025-04-06 16:07:22'),
(42, '67f25915135c9', 'What are pointers in C, and how are they used? Provide an example of pointer usage.', 'A pointer in C is a variable that stores the memory address of another variable. They are used to indirectly access and manipulate data stored at that address. Pointers are declared using the `*` operator.  Example:\n\nc\nint num = 10;\nint *ptr = &num; // ptr now holds the address of num\n\nprintf(\"Value of num: %d\\n\", num);\nprintf(\"Address of num: %p\\n\", &num);\nprintf(\"Value of ptr: %p\\n\", ptr);\nprintf(\"Value pointed to by ptr: %d\\n\", *ptr); // Dereferencing ptr\n\n*ptr = 20; // Modifying num through ptr\nprintf(\"Value of num after modification: %d\\n\", num);\n\nPointers are crucial for dynamic memory allocation, passing arguments by reference, and implementing data structures like linked lists.', 'In C, pointers are variables that store the memory address of another variable, enabling direct.', 'The answer starts well by defining pointers as variables that store memory addresses. However, it\'s incomplete and lacks detail. To improve, elaborate on the concept of dereferencing, pointer arithmetic, and different pointer types. Include a practical example demonstrating pointer usage with explanation.', '3', 'gorea722@gamil.com', '2025-04-06 16:19:12'),
(43, '67f25915135c9', 'What is a structure in C, and how is it defined? Give an example.', 'A structure in C is a user-defined data type that groups together variables of different data types under a single name. It allows you to treat related data as a single unit. Structures are defined using the `struct` keyword. Example:\n\nc\nstruct Point {\n  int x;\n  int y;\n};\n\nint main() {\n  struct Point p1;\n  p1.x = 10;\n  p1.y = 20;\n  printf(\"Point coordinates: (%d, %d)\\n\", p1.x, p1.y);\n  return 0;\n}', 'In C, pointers are variables that store the memory address of another variable, enabling direct.', 'The user\'s answer discusses pointers, which is unrelated to the question about structures. The response is entirely irrelevant and does not address the prompt at all. The answer needs to be completely rewritten to focus on structures in C.', '0', 'gorea722@gamil.com', '2025-04-06 16:21:02'),
(44, '67f25915135c9', 'Explain the difference between `static` and `const` keywords in C, with respect to variables.', '`static` and `const` serve different purposes in C. `const` keyword makes a variable\'s value read-only after initialization. Once a variable is declared `const`, its value cannot be changed during the program\'s execution. `static` keyword, when applied to a variable inside a function, gives the variable *static storage duration*. It retains its value between function calls. Its scope is still limited to the function, but it\'s only initialized once during the program\'s lifetime. When applied to a global variable or function, `static` limits its visibility to the current file (internal linkage). This prevents name collisions with other files.', 'While constant shows a variables value remains unchanged after initialization.', 'The answer only partially addresses the `const` keyword. It doesn\'t explain `static` at all. It needs to include the meaning of both the keyword in the context of C variables and their differences. Focus on what `static` actually does in terms of scope and lifetime, and then contrast with `const`\'s immutability feature. Also make it clear the distinctions when used within function versus outside function for `static`.', '3', 'gorea722@gamil.com', '2025-04-06 16:22:37'),
(45, '67f25915135c9', 'Describe the different data types in C and give memory allocations for each data type', 'C provides several basic data types to represent different kinds of values:\n\n*   **`int`:** Integer numbers (e.g., -10, 0, 25). Typically occupies 4 bytes (32 bits) on most systems, but can be 2 bytes on older or embedded systems.\n*   **`char`:** Single characters (e.g., \'a\', \'Z\', \'7\').  Occupies 1 byte.\n*   **`float`:** Single-precision floating-point numbers (e.g., 3.14, -2.5).  Typically occupies 4 bytes.\n*   **`double`:** Double-precision floating-point numbers (e.g., 3.14159265359).  Typically occupies 8 bytes.\n*   **`short`:** Short integer.  Typically occupies 2 bytes.\n*   **`long`:** Long integer.  Typically occupies 4 or 8 bytes (system-dependent).\n*   **`long long`:** Very long integer. Typically occupies 8 bytes.\n*   **`void`:** Represents the absence of a type. Used for functions that don\'t return a value or for generic pointers.\n\nThe exact size of these data types can vary depending on the compiler and the underlying architecture. Use `sizeof()` operator to check memory allocation in bytes.', 'While constant shows a variables value remains unchanged after initialization.', 'The user\'s answer completely misses the question. It talks about \'constant\' which, while related to variables, doesn\'t address the core request about data types in C and their memory allocation. The answer is irrelevant to the question asked, demonstrating a lack of understanding of the fundamental concepts.', '1', 'gorea722@gamil.com', '2025-04-06 16:23:40'),
(46, '67f2a3aa4d82f', 'Describe your experience with HTML semantic elements. Why are they important?', 'I have experience using semantic HTML elements like `<article>`, `<aside>`, `<nav>`, `<header>`, `<footer>`, and `<main>`. They\'re important because they provide meaning to the structure of a webpage, improving accessibility for screen readers and enhancing SEO by making it easier for search engines to understand the content. They also contribute to cleaner and more maintainable code.', 'Symantec HTML are tags that describe their purpose or meaning rather than just their presentation, making web pages more structured and accessible for both humans and machines. They are important from improved accessibility.', 'The answer has a good start by defining semantic HTML. However, it uses the wrong term, \"Symantec\" instead of \"Semantic\". It mentions accessibility as a benefit but could expand on others like SEO and maintainability. A clearer explanation of how these elements improve accessibility would also be helpful.', '6', 'gorea722@gamil.com', '2025-04-06 21:26:47'),
(47, '67f2a3aa4d82f', 'Explain the difference between inline, block, and inline-block elements in HTML. Give examples of common elements for each.', 'Inline elements flow within the text, only taking up as much width as necessary (e.g., `<span>`, `<a>`, `<em>`). Block elements take up the full width available and start on a new line (e.g., `<div>`, `<p>`, `<h1>`). Inline-block elements are like inline elements but allow you to set their width and height (e.g., `<img>`, or any element with `display: inline-block` applied in CSS).', 'In HTML, inline elements flow the text and don\'t start a new line, while block elements start on a new line and take up the full available width inline block element. Combine these behaving like inline elements.', 'The answer correctly identifies the core difference between inline and block elements: line breaking and width. However, it could be more specific about inline-block elements. It should explicitly state that inline-block elements allow setting width and height, which inline elements do not. Including examples of common elements for each type would also strengthen the answer.', '7', 'gorea722@gamil.com', '2025-04-06 21:29:32'),
(48, '67f2a3aa4d82f', 'How do you ensure your HTML code is accessible?', 'I ensure accessibility by using semantic HTML, providing alternative text for images (`alt` attribute), using appropriate heading structures (H1 to H6), ensuring sufficient color contrast, labeling form elements correctly with `<label>`, and using ARIA attributes when necessary to provide more information to assistive technologies. I also use accessibility testing tools to identify and address potential issues.', 'To ensure your HTML code is accessible, use semantics. HTML elements provide alternative text for image alternative attributes, and use the descriptive link text. Include the Lang attribute to specify the page.', 'The answer correctly identifies the importance of semantics and `alt` attributes for images. However, it could be more comprehensive. Consider mentioning ARIA attributes for complex widgets, proper heading structures, keyboard navigation, and sufficient color contrast. Also mention using tools like accessibility checkers.', '7', 'gorea722@gamil.com', '2025-04-06 21:30:52'),
(49, '67f2a3aa4d82f', 'Describe a situation where you had to debug a complex HTML structure. What approach did you take?', 'In one project, a complex HTML table was not rendering correctly in all browsers. I started by using the browser\'s developer tools to inspect the HTML and CSS. I identified misnested elements and inconsistent table row/column structures. I then systematically corrected the HTML, using the browser\'s element highlighting feature to visually confirm the fixes were working correctly.  I also used a HTML validator to identify any structural errors that may have caused the unexpected rendering.', 'Honestly, I don\'t know the answer of this question is I continue to the next question.', 'The answer is completely irrelevant to the question. The candidate admitted they don\'t know the answer instead of attempting to describe a debugging process or even providing a hypothetical scenario. They should research common HTML debugging techniques and tools to be prepared for similar questions.', '1', 'gorea722@gamil.com', '2025-04-06 21:32:21'),
(50, '67f2a3aa4d82f', 'What are your preferred methods for structuring HTML for responsiveness?', 'I prefer to use a combination of techniques, including a mobile-first approach. This means starting with a basic layout optimized for small screens and then using CSS media queries to progressively enhance the layout for larger screens.  I also utilize flexible grid layouts and flexible images to ensure content adapts well to different screen sizes.  I also use viewport meta tag to ensure the page scales correctly on mobile devices.', 'For structuring element for responsiveness of fluid grid layout combined with CSS media queries are flexible units like percentages and viewport unit the preferred approach. This allows the content to adapt various screen sizes and devices.', 'The answer is relevant and mentions key aspects of responsive design. However, it could be improved by including specific HTML structuring techniques like using semantic HTML5 elements (e.g., `<article>`, `<aside>`), and the use of container elements. A brief mention of CSS frameworks or grid systems would also strengthen the response. While percentages and viewport units are important, they aren\'t the *only* elements.', '7', 'gorea722@gamil.com', '2025-04-06 21:33:25'),
(52, '67ffb1e71e672', 'Describe your experience with pointers in C. Can you give an example of a common mistake when using pointers and how you would avoid it?', 'I have extensive experience working with pointers in C. I\'ve used them for dynamic memory allocation, implementing data structures like linked lists and trees, and passing function arguments by reference. A common mistake is dereferencing a null or uninitialized pointer, which leads to segmentation faults. To avoid this, I always initialize pointers to NULL or a valid memory address, and I use defensive programming techniques like null checks before dereferencing them. I also use tools like Valgrind to detect memory leaks and other pointer-related errors.', 'Pointers in C are incredibly powerful, but also prone to be suitable error if the not handle carefully. One common mistake is dereferencing of NULL or uninitializing pointers, which leads undefined behavior or program crashes.', 'Array', '7', 'gorea722@gamil.com', '2025-04-16 19:07:41'),
(53, '67ffb1e71e672', 'Explain the difference between `malloc` and `calloc` in C. When would you prefer one over the other?', '`malloc` and `calloc` are both used for dynamic memory allocation in C. `malloc` allocates a block of memory of a specified size, but the memory is not initialized. `calloc` allocates a block of memory for an array of elements, all of which are initialized to zero. I would prefer `calloc` when I need to allocate memory for an array and ensure that the elements are initialized to zero, as this eliminates the need for a separate initialization step. I would prefer `malloc` when I need to allocate a block of memory and don\'t need it to be initialized or when the zero-initialization overhead of `calloc` is a concern for performance.', 'Inseam malloc allocates the requested memory but does not initialize it. The memory maybe contains garbage value. Kellogg allocates the memory and initialize all bytes to the 0.', 'The answer is mostly correct but contains typos (\'Inseam malloc\' and \'Kellogg\'). While it explains the key difference (initialization), it could be more precise about the behavior of `malloc` (uninitialized content rather than \'garbage value\') and `calloc` (zero-initialization). It lacks specific scenarios of when to choose which, which is essential for a complete answer. Improving the language and adding use-case examples will greatly enhance the response.', '7', 'gorea722@gamil.com', '2025-04-16 19:08:46'),
(54, '67ffb1e71e672', 'How do you handle memory leaks in C? Describe the strategies and tools you use to identify and prevent them.', 'Memory leaks are a serious concern in C. To handle them, I follow these strategies: 1. **Careful allocation and deallocation:** Ensure every `malloc` or `calloc` call is paired with a corresponding `free`. 2. **Avoid dangling pointers:** Ensure that pointers are not referencing memory that has already been freed.  3. **Use RAII-like patterns (though not strictly RAII in C):** When possible, encapsulate memory allocation and deallocation within a function or struct so that deallocation is guaranteed. 4. **Use debugging tools:**  I regularly use Valgrind (specifically Memcheck) to detect memory leaks.  I also sometimes manually review code for potential allocation/deallocation mismatches.  For smaller projects, I\'ve used `mtrace` for tracing memory allocations and deallocations. 5. **Coding standards and reviews:** Following coding standards and conducting code reviews help to catch potential memory leaks early in the development process.', 'Memory leaks in C occur when dynamically allocated memory is not properly deallocated, causing the gradual increase of memory usage and the potential crashing the program over time.', 'The answer only identifies the problem. It lacks specifics on strategies and tools used for identification and prevention. It needs to elaborate on techniques like manual memory management practices (RAII-like patterns), smart pointers (if applicable via libraries), static analysis, dynamic analysis (Valgrind), and code review best practices.', '3', 'gorea722@gamil.com', '2025-04-16 19:09:59'),
(55, '67ffb1e71e672', 'Describe how you would implement a simple linked list in C. What are the advantages and disadvantages of using linked lists compared to arrays?', 'A simple linked list in C can be implemented by defining a structure for the node, which contains a data field and a pointer to the next node. I would then create functions for inserting, deleting, and traversing nodes in the list. Advantages of linked lists compared to arrays include: dynamic size (no need to predefine the size), easier insertion and deletion of elements (no need to shift elements). Disadvantages include: random access is not efficient (must traverse from the head), requires more memory due to the pointer overhead, and potentially worse cache performance due to scattered memory locations.', 'A linked list is a dynamic data structure where each element node contains the data and the pointer to the next node. Here\'s how you can implement in the C structure node in Data structure node star next.', '{\"relevance\": \"The answer starts relevantly by describing the basic structure of a linked list.\", \"completeness\": \"It\'s incomplete as it only mentions the structure definition and doesn\'t show the full implementation (e.g., creating, inserting, deleting nodes).\", \"clarity\": \"The clarity is okay, but can be improved by providing more explicit C code snippets or pseudocode.\" ,\"improvement_areas\": \"Provide C code for node structure, creating a new node, and inserting a node. Explain the advantages and disadvantages of linked lists compared to arrays in more detail.\"}', '6', 'gorea722@gamil.com', '2025-04-16 19:11:08'),
(56, '67ffb1e71e672', 'Explain the concept of preprocessor directives in C. Give examples of common preprocessor directives and their uses. How can they be helpful and when should they be used cautiously?', 'Preprocessor directives are instructions to the C preprocessor, which modifies the source code before it is compiled. Common directives include: `#include` (includes header files), `#define` (defines macros), `#ifdef`, `#ifndef`, `#endif` (conditional compilation). They are helpful for: 1. **Code organization:** Including header files to manage dependencies. 2. **Conditional compilation:** Enabling or disabling code based on certain conditions (e.g., debugging mode). 3. **Macro definitions:** Creating shorthand aliases for constants or code snippets. They should be used cautiously because overuse of macros can make code harder to debug and maintain due to lack of type checking and potential side effects. Excessive conditional compilation can also lead to complex and difficult-to-understand code. It\'s often better to use `const` variables instead of macros for constants, and functions instead of complex macro expressions where possible.', 'Pre processor directives in C are special instruction that process before the actual completion of code. They begin with the hash symbol and help to modify the source code in various ways such as including file defining, micros and.', 'The answer provides a basic definition but lacks depth and specific examples. It mentions the hash symbol and general functions but could benefit from illustrating common directives like `#include`, `#define`, `#ifdef`, `#ifndef`, and `#endif` with code snippets. Also, expanding on the benefits and potential pitfalls (like macro side effects or conditional compilation complexity) would improve the answer\'s completeness. The clarity is acceptable, but more detail would make it better.', '6', 'gorea722@gamil.com', '2025-04-16 19:12:02');

-- --------------------------------------------------------

--
-- Table structure for table `users`
--

CREATE TABLE `users` (
  `id` int(11) NOT NULL,
  `firstname` varchar(100) NOT NULL,
  `lastname` varchar(100) NOT NULL,
  `email` varchar(255) NOT NULL,
  `password` varchar(255) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;

--
-- Dumping data for table `users`
--

INSERT INTO `users` (`id`, `firstname`, `lastname`, `email`, `password`) VALUES
(3, 'Aditya', 'Gore', 'gorea722@gamil.com', '$2y$10$Ah4uIkIJryUxv1ah65G6BuB9KiVLF.IlxIB6NIjAevQe8ArJAx6vS');

--
-- Indexes for dumped tables
--

--
-- Indexes for table `interviews`
--
ALTER TABLE `interviews`
  ADD PRIMARY KEY (`id`),
  ADD UNIQUE KEY `mockid` (`mockid`);

--
-- Indexes for table `useranswer`
--
ALTER TABLE `useranswer`
  ADD PRIMARY KEY (`id`);

--
-- Indexes for table `users`
--
ALTER TABLE `users`
  ADD PRIMARY KEY (`id`),
  ADD UNIQUE KEY `email` (`email`);

--
-- AUTO_INCREMENT for dumped tables
--

--
-- AUTO_INCREMENT for table `interviews`
--
ALTER TABLE `interviews`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=75;

--
-- AUTO_INCREMENT for table `useranswer`
--
ALTER TABLE `useranswer`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=57;

--
-- AUTO_INCREMENT for table `users`
--
ALTER TABLE `users`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=4;
COMMIT;

/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
